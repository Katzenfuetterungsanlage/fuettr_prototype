/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package server_client.client;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.SwingWorker;

/**
 *
 * @author Florian
 */
public class Client extends javax.swing.JFrame
{

    /**
     * Creates new form Client
     */
    public Client()
    {
        initComponents();
        ConnectionWorker worker = new ConnectionWorker();
        worker.execute(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jPanel1 = new javax.swing.JPanel();
        lbTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbTime.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        lbTime.setText("jLabel1");
        jPanel1.add(lbTime);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbTime;
    // End of variables declaration//GEN-END:variables

private class ConnectionWorker extends SwingWorker<Object,String>
{
    
    String text; 

    @Override
    protected Object doInBackground() throws Exception
    {
        String adress = "127.0.0.1"; 
        int port = 8080; 
        
        try
        {
            Socket socket = new Socket(adress,port);
            System.out.println("Verbindung wurde erfolgreich hergestellt:" + socket);
            
            BufferedReader reader = new BufferedReader(
                new InputStreamReader(socket.getInputStream()));

            BufferedWriter writer = new BufferedWriter(
                new OutputStreamWriter(socket.getOutputStream()));
            
            while (true)
            {
                writer.write("Tell me the time\n");
                writer.flush();

                text = reader.readLine();
                
                if (text.equals("403"))
                {
                    text = "ERROR";
                }
          
                publish(text); // gibt Text an process weiter
          
                TimeUnit.MILLISECONDS.sleep(500);
            }
        }
        
        catch (IOException ex)
        {
            System.out.println("ERROR: " + ex.getMessage());
        }
        
        return null; 
    }

        @Override
        protected void process(List<String> chunks)
        {
            lbTime.setText(text);
        }    
}
}
